import 'package:flutter/material.dart';
import 'package:manual_qa_helper/widgets/article_content.dart';

// TODO: Сделать класс со стилями текста для заголовков разных уровней и выделения текста
// TODO: Сделать визуальные виджеты для разделения текста или выделения текста
// TODO: Сделать страничку с пояснениями виджетов и выделений текста
class ManualQaArticles {
  //
  // Введение в тестирование
  //
  static final article1 = ArticleContent(
    article: [
      Text(
        'Мы начинаем модуль «Ручное тестирование веб-приложений» с занятия «Введение в тестирование ПО. Методы и виды тестирования». Первое занятие теоретическое, мы познакомимся с профессией «тестировщик» и узнаем, из чего состоит тестирование ПО.',
      ),
      Text('Цели занятия'),
      Text(
        '- Узнать, с чего начиналось тестирование сайтов и программ.\n- Выяснить, какими основными понятиями оперирует тестировщик.\n- Разобраться, из чего состоит цикл тестирования ПО.\n- Изучить уровни и виды тестирования.',
      ),
    ],
  );
  //
  // История тестирования
  //
  static final article2 = ArticleContent(
    article: [
      Text(
        'История контроля качества начинается задолго до эпохи активного развития разработки ПО - в виде ГОСТов или отделов ОТК на заводе.\nЕсли говорить про разработку ПО и место тестирование в ней, то в 60-70-е годы тестирование было отделено от процесса разработки, в 80-е оно стало проводиться на протяжении всего жизненного цикла разработки ПО.',
      ),
      Text(
        'В 90-х годах произошёл переход от тестирования как такового к более всеобъемлющему процессу, который называется "обеспечение качества" (quality assurance), охватывает весь цикл разработки ПО и затрагивает процессы планирования, проектирования, создания и выполнения тест-кейсов, поддержку имеющихся тест-кейсов и тестовых окружений',
      ),
      Text(
        'Простыми словами, тестировщик сегодня - это человек, который помогает делать продукт лучше с каждым днём, использую современные технологии и методики.',
      ),
    ],
  );
  //
  // Что такое тестирование
  //
  static final article3 = ArticleContent(
    article: [
      Text(
        'Тестирование - это проверка соответствия между реальным и ожидаемым поведением программы, которая осуществляется на конечном наборе тестов, выбранным определённым образом',
      ),
      Text('QA, QC & Testing'),
      Text(
        'Задача контроля качества (QC) - гарантировать соответствие требованиям: поиск ошибок и их устранение.\nQC ориентирован на проверку продукта, включает в себя многие процессы: анализ кода, технические обзоры, анализ дизайна, тестирование и прочее.',
      ),
      Text(
        'Тестирование - это проверка результатов работы на соответствие требованиям.',
      ),
      Text(
        'Обеспечение качества (QA) - отвечает за весь процесс разработки, поэтому должно быть интегрировано во все этапы разработки: от описания проекта до тестирования, релиза и даже пост-релизного обслуживания.',
      ),
      Text(
        'Специалисты QA создают и реализуют различные тактики для повышения качества на всех стадиях производства: подготовка и установление стандартов, анализ качества, выбор инструментов, предотвращение появление ошибок и постоянное усовершенствование процесса.',
      ),
    ],
  );
  //
  // Основные понятия в тестировании
  //
  static final article4 = ArticleContent(
    article: [
      Text(
        '- Дефект / баг / дефект репорт (Bug Report)\n- Тестовый сценарий (Test Case)\n- Тестовые данные (Test Data)\n- Тест-дизайн (Test Design)',
      ),
      Text(
        'Дефект / баг / дефект репорт (Bug Report) - это документ, описывающий ситуацию или последовательность действий, которая привела к некорректной работе объекта тестирования, с указанием причин, фактического и ожидаемого результата.',
      ),
      Text(
        'Тестовый сценарий (Test Case) - это артефакт, который описывает совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или её части.',
      ),
      Text(
        'Тестовые данные (Test Data) - набор данных, необходимых для выполнения тестового сценария.\nИми могут быть логин и пароль или файл для загрузки в программу, на котором загрузчик перестаёт работать',
      ),
      Text(
        'Тест-дизайн (Test Design) - это этап процесса тестирования ПО, на котором проектируются и создаются тестовые случаи (тест-кейсы) в соответствии с определёнными ранее критериями качества и целями тестирования',
      ),
    ],
  );
  //
  // Цели тестирования
  //
  static final article5 = ArticleContent(
    article: [
      Text(
        'Цель тестирования - минимизировать количество существующих дефектов в конечном продукте.',
      ),
      Text(
        'Грамотно организованное тестирование гарантирует:\n- что система удовлетворяет требованиям\n- система ведёт себя в соответствии с требованиями во всех предусмотренных ситуациях',
      ),
      Text(
        'Задача тестирования - определить условия, при которых появляются дефекты системы.',
      ),
      Text(
        'Так же тестирование помогает экономить ресурсы и даёт продукту конкурентные преимущества.',
      ),
    ],
  );
  //
  // Цикл тестирования
  //
  static final article6 = ArticleContent(
    article: [
      Text('Попробуем разделить процесс тестирования на этапы.'),
      Text(
        'Основные процессы тестирования ПО:\n- планирование\n- мониторинг и контроль\n- проектирование и анализ\n- реализация и выполнение тестов\n- создание отчётности\n- завершение и подведение итогов',
      ),
      Text(
        'Попробуем рассмотреть их на примере релиза новой версии приложения.',
      ),
      Text('Планирование'),
      Text('- Определение целей тестирования\n- Управление тестированием'),
      Text(
        'Цель - проверить, что существующий функционал работает, как ранее, ошибки исправлены, а новые фичи внедрены верно\nРешаем, сколько ресурсов у нас есть на тестирование',
      ),
      Text('Мониторинг и контроль'),
      Text('- Оценка статуса работы\n- Работа с метриками'),
      Text(
        'Обеспечение отслеживаемости процессов и возможность создавать отчёты с конкретными метриками делают процесс тестирования проще и понятнее для всех участников команды разработки',
      ),
      Text('Проектирование и анализ'),
      Text(
        '- Рецензирование основы тестирования: целостность, анализ рисков, архитектура, дизайн\n- Расстановка приоритетов\n- Подготовка окружения',
      ),
      Text(
        'Продумываем, какой функционал - наше слабое место. Решаем, на что бросить основные силы, подготавливаем тестовые данные, такие как логины и пароли. Задача - понять, что тестировать и как.',
      ),
      Text('Реализация и выполнение тестов'),
      Text(
        '- Написание тестовых сценариев\n- Проведение тестирования\n- Повторное тестирование',
      ),
      Text('Пишем сценарии для нового функционала, проходим тест-кейсы'),
      Text('Создание отчётности'),
      Text(
        '- Создание отчётов по тестированию\n- Дополнительные сценарии для проверки',
      ),
      Text(
        'Создаём отчёт, в котором описываем, какие ошибки были найдены, какие тесты были успешно пройдены, проверяем отдельные нестандартные сценарии',
      ),
      Text('Подведение итогов'),
      Text(
        '- Анализ проведённой работы\n- Выводы о том, как использовать новые знания в будущей работе',
      ),
      Text('Делаем выводы: как лучше тестировать новый функционал.'),
      Text('Дополнительные этапы'),
      Text(
        '- Тестирование сопровождения\n- Работа с отзывами от пользователей и многие другие',
      ),
      Text('Например, можно изучать отзывы бета-пользователей.'),
    ],
  );
  //
  // Уровни и типы тестирования
  //
  static final article7 = ArticleContent(
    article: [
      Text('Классификация тестирования'),
      Text(
        'Существует огромное количество способов классифицировать деятельность в сфере тестирования. Это нужно, чтобы максимально эффективно совмещать различные виды работ.',
      ),
      Text('Уровни тестирования'),
      Text(
        'Уровень тестирования определяет то, над чем производится тестирование: над отдельным модулем, группой модулей или системой в целом.\nПроведение тестирования на всех уровнях системы - это залог успешной реализации и сдачи проекта.',
      ),
      // TODO: написать про пирамиду тестирования
      Text(
        'Тестирование:\n- компонентное, или модульное (Component testing)\n- интеграционное (Integration testing)\n- системное (System testing)\n- приёмочное (Acceptance testing)',
      ),
      Text('Компонентное, или модульное тестирование'),
      Text(
        'Провеяет функциональность и ищет дефекты в частях приложения, которые доступны и могут быть протестированы по отдельности: модули программ, объекты, классы, функции и т.д.',
      ),
      Text('Интеграционное тестирование'),
      Text(
        'Проверяется взаимодействие между компонентами системы после проведения компонентного тестирования или взаимодействия нашей системы с другими системами.',
      ),
      Text('Системное тестирование'),
      Text(
        'Полностью реализованный программный продукт подвергается системному тестированию.\nНа этом этапе тестировщика интересуют не корректность реализации отдельных процедур и методов, а вся программа в целом, как её видит конечный пользователь.',
      ),
      Text(
        'Основой для тестов служат общие требования к программе, включая не только корректность реализации функций, но и производительность, время отклика, устойчивость к сбоям, атакам, ошибкам пользователя и т.д.',
      ),
      Text('Приёмочное тестирование'),
      Text(
        'Формальный процесс тестирования, который проверяет соответствие системы требованиям.',
      ),
      Text(
        'Цели приёмочного тестирования:\n- определить, удовлетворяет ли система приёмочным критериям\n- вынесение решения заказчиком или другим уполномоченным лицом о том, принимается приложение или нет',
      ),
      Text(
        'Проводится, когда продукт стал соответствовать изначальным требования ТЗ.',
      ),
    ],
  );
  //
  // Виды тестирования на основе целей и задач
  //
  // Функциональное тестирование
  //
  static final article8 = ArticleContent(
    article: [
      Text('Функциональное тестирование'),
      Text(
        'Расматривает заранее указанное поведение и основывается на анализе спецификаций функциональности компонента или системы в целом. Проще говоря, это тестирование функциональности на соответствие требованиям.',
      ),
      Text(
        'Функциональные тесты могут быть предствлены на всех уровнях тестирования, рассмотренных выше.',
      ),
    ],
  );
  //
  // Тестирование пользовательского интерфейса
  //
  static final article9 = ArticleContent(
    article: [
      Text(
        'Тестирование пользовательского интерфейса (GUI Testing) - функциональная проверка интерфейса на соответствие требованиям: размер, шрифт, цвет, вёрстка.',
      ),
    ],
  );
  //
  // Нефункционального тестирование
  //
  static final article10 = ArticleContent(
    article: [
      Text(
        'Цель нефункционального тестирования системы - оценить такие характеристики системы и программного обеспечения, как удобство использования, производительность или безопасность.',
      ),
    ],
  );
  //
  // Тестирование производительности
  //
  static final article11 = ArticleContent(
    article: [
      Text(
        'Тестирование производительности (Performance testing) производится, чтобы определить производительность программного продукта.\nНекоторые из его направлений:',
      ),
      Text('Нагрузочное тестирование (Load testing):'),
      Text(
        'Оценивает проведение компонента или системы под увеличивающейся нагрузкой (число одновременно работающих пользователей и / или число транзакций), чтобы определить максимально допустимый уровень нагрузки для компонента или системы.',
      ),
      Text('Объёмное тестирование (Volume testing):'),
      Text('Система испытывается на больших объёмах данных (базы данных).'),
      Text('Стрессовое тестирование (Stress testing):'),
      Text(
        'Оценивает систему или компонент на граничных значениях рабочих нагрузок или за пределами, в состоянии ограниченных ресурсов, таких как память или доступ к серверу.',
      ),
    ],
  );
  //
  // Тестирование удобства пользования
  //
  static final article12 = ArticleContent(
    article: [
      Text(
        'Тестирование удобства пользования\n(Usability testing / UX) - Устанавливает степень удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий.',
      ),
    ],
  );
  //
  // Тестирование безопасности
  //
  static final article13 = ArticleContent(
    article: [
      Text(
        'Тестирование безопасности (Safety testing) - тестирование программного продукта с целью определить его безопасность.',
      ),
      Text(
        'Помимо этого:\n- анализ рисков\n- атаки хакеров\n- вирусов\n- несанкционированного доступа к конфиденциальным данным',
      ),
    ],
  );
  //
  // Санитарное тестирование
  //
  static final article14 = ArticleContent(
    article: [
      Text(
        'После проведения необходимых изменений, таких как исправление бага или дефекта, программное обеспечение необходимо протестировать, что бы подтвердить решение проблемы.',
      ),
      Text(
        'Санитарное тестирование (Sanity testing) или проверка согласованности / исправности - это узконаправленное тестирование, достаточное для доказательства того, что конкретная функция работает согласно заявленным в спецификации требованиям',
      ),
    ],
  );
  //
  // Дымовое тестирование
  //
  static final article15 = ArticleContent(
    article: [
      Text(
        'Дымовое тестирование (Smoke testing) - рассматривается как короткий цикл тестов, выполняемый для подтверждения того, что после сборки кода (нового или исправленного) устанавливаемое приложение стартует и выполняет основные функции.',
      ),
    ],
  );
  //
  // Тестирование сборки
  //
  static final article16 = ArticleContent(
    article: [
      Text(
        'Тестирование сборки (Build Verification Test) - определяет, соответствует ли выпущенная версия критериям качества для начала тестирования.',
      ),
      Text(
        'По своим целям это аналог дымового тестирования, которые проводятся для приёмки новой версии в дальнейшее тестирование или эксплуатацию.',
      ),
    ],
  );
  //
  // Регрессионное тестирование
  //
  static final article17 = ArticleContent(
    article: [
      Text(
        'Регрессионное тестирование (Regression testing) - это вид тестирования, с помощью которого проверяют изменения, сделанные в приложении или окружающей среде (починка дефетка, слияние кода, миграция на другую операционную систему, базу данных), для подтверждения того факта, что существующая ранее функциональность работает, как и прежде.',
      ),
    ],
  );
  //
  // Тестирование установки
  //
  static final article18 = ArticleContent(
    article: [
      Text(
        'Тестирование установки (Installation testing) - проверяет успешную инсталляцию и настройку, а так же обновление или удаление программного обеспечения.',
      ),
      Text(
        'Например, сборка мобильного приложения может работать сама, но если установить её поверх предыдущей версии из App Store, она даже не будет запускаться из-за внутреннего конфликта.',
      ),
    ],
  );
  //
  // Тестирование локализации
  //
  static final article19 = ArticleContent(
    article: [
      Text(
        'Тестирование локализации (Localization testing) - оценивает правильность версии программного продукта с точки зрения языкового и культурного аспекта.\nПроверяем работу приложения для определённых регионов, языков, строк, чисел, дат, валют и прочего.',
      ),
      Text(
        'Локализация:\n- Переводы\n- Правовые требования\n- Валюта и валютные операции\n- Цветовые решения и символика\n- Раскладки клавиатуры и горячие клавиши\n- Интеграция со сторонними ресурсами.',
      ),
      Text(
        'Интернациолизация:\n- UTF - кодировки\n- Форматы данных\n- Направления текста\n- Выделения локализованных элементов из кода',
      ),
    ],
  );
  //
  // Конфигурационное тестирование
  //
  static final article20 = ArticleContent(
    article: [
      Text(
        'Конфигурационное тестирование (Configuration testing) - проверяет работу программного обеспечения при различных конфигурациях системы: заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т.д.',
      ),
      Text('Оно делится на:\n- Клиентское\n- Серверное'),
    ],
  );
  //
  // Тестирование доступности
  //
  static final article21 = ArticleContent(
    article: [
      Text(
        'Тестирование доступности (Accessibility testing) - проверяет приложение на соответствие рекомендациям документа W3C, а именно положению Web Content Accessibility (WCAG) 2.1',
      ),
      Text(
        'То есть специалисты проверяют, насколько то или иное приложение доступно людям с ограниченными возможностями.',
      ),
    ],
  );
  //
  // Выводы по теме введение в тестирование
  //
  static final article22 = ArticleContent(
    article: [
      Text(
        'Теперь мы начали узнавать основные понятия, важные для тестировщика, и немного приблизились к понимаю того, чем же на самом деле занимается специалист по качеству.',
      ),
      Text(
        'Сфера тестирования одновременно сложна и интересна тем, что в ней нет стандартизированного сценария развития специалиста и в каждой компании и даже команде вам придётся использовать совершенно разные методики.',
      ),
      Text(
        'Одна из наших целей - научиться находить баланс между тем, сколько ресурсов есть для разнообразных задач, сколько нужно (и можно) потратить и какими методами это сделать.',
      ),
      Text(
        'Тестирование в реальном мире зачастую не про идеальный софт, а про понимание "уровня совершенства", который применим к каждой отдельной ситуации.',
      ),
      Text(
        'Например, что если у нас есть час на все тесты, лучше провести дымовое тестирование, а когда неделя - мы можем спокойно провести полноценное регрессионное тестирование.',
      ),
    ],
  );
}
